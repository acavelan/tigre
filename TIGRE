Architecture:
==============

- namespaces are written in lowercase
- a namespace holds a set of interfaces and cross-platform code
- a subdirectory named after its interface (ex: Renderer/) can hold 
multiple implementations of that interface, for different systems.

::tigre
	::core
		- Exceptions
		- Resource
		- Loader
	::utils
		- Logger
		- Timer
	::graphics
		- Renderer
		- Display
		- Context
		- Image
		- Texture2D
		- Mesh
		- ModelMesh
		- Shader
		- Color
		- Rectangle
	::android
		- Activity
		

Compilation:
=============

Tigre is very modular, like a bunch of Lego pieces, and it would be nonsense to 
provide one very specific build since everyone is likely to need something 
different.

Tigre provides some examples that you can use as a start-up build, including 
different ways to compile the library, so you can easily adapt it to your needs.

Indentation:
=============

Allman style, also known as ANSI style or BSD style. This is what Tigre
uses but you are free to use your favorite indent style.

Conventions:
=============

Tigre uses its own coding conventions to be as simple as possible:

* Naming:
- private attributes start with an underscore (ex: _name)
- namespaces, functions and methods start with a lowercase letter
- the underscore is use as a separator for C code (ex: some_cool_name)
- whereas a captial letter is prefered in C++ (ex: someCoolName)

* Comments:
- C style comments are used for documentation (ex: /** ... */)
- C++ double-dash comments are also used inside a block to give a 
specific information on a particular line (ex: // here is a tip)
- comments lenght can exceed 80 characters but it has to remain resonable

* Spaces:
- Tigre uses a simple line as a vertical separator

